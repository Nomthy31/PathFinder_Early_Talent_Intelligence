{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { StorageVectorsApiError, StorageVectorsUnknownError } from './errors';\nimport { isPlainObject } from './helpers';\n/**\r\n * Extracts error message from various error response formats\r\n * @param err - Error object from API\r\n * @returns Human-readable error message\r\n */\nconst _getErrorMessage = err => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\n/**\r\n * Handles fetch errors and converts them to StorageVectors error types\r\n * @param error - The error caught from fetch\r\n * @param reject - Promise rejection function\r\n * @param options - Fetch options that may affect error handling\r\n */\nconst handleError = (error, reject, options) => __awaiter(void 0, void 0, void 0, function* () {\n  // Check if error is a Response-like object (has status and ok properties)\n  // This is more reliable than instanceof which can fail across realms\n  const isResponseLike = error && typeof error === 'object' && 'status' in error && 'ok' in error && typeof error.status === 'number';\n  if (isResponseLike && !(options === null || options === void 0 ? void 0 : options.noResolveJson)) {\n    const status = error.status || 500;\n    const responseError = error;\n    // Try to parse JSON body if available\n    if (typeof responseError.json === 'function') {\n      responseError.json().then(err => {\n        const statusCode = (err === null || err === void 0 ? void 0 : err.statusCode) || (err === null || err === void 0 ? void 0 : err.code) || status + '';\n        reject(new StorageVectorsApiError(_getErrorMessage(err), status, statusCode));\n      }).catch(() => {\n        // If JSON parsing fails, create an ApiError with the HTTP status code\n        const statusCode = status + '';\n        const message = responseError.statusText || `HTTP ${status} error`;\n        reject(new StorageVectorsApiError(message, status, statusCode));\n      });\n    } else {\n      // No json() method available, create error from status\n      const statusCode = status + '';\n      const message = responseError.statusText || `HTTP ${status} error`;\n      reject(new StorageVectorsApiError(message, status, statusCode));\n    }\n  } else {\n    reject(new StorageVectorsUnknownError(_getErrorMessage(error), error));\n  }\n});\n/**\r\n * Builds request parameters for fetch calls\r\n * @param method - HTTP method\r\n * @param options - Custom fetch options\r\n * @param parameters - Additional fetch parameters like AbortSignal\r\n * @param body - Request body (will be JSON stringified if plain object)\r\n * @returns Complete fetch request parameters\r\n */\nconst _getRequestParams = (method, options, parameters, body) => {\n  const params = {\n    method,\n    headers: (options === null || options === void 0 ? void 0 : options.headers) || {}\n  };\n  if (method === 'GET' || !body) {\n    return params;\n  }\n  if (isPlainObject(body)) {\n    params.headers = Object.assign({\n      'Content-Type': 'application/json'\n    }, options === null || options === void 0 ? void 0 : options.headers);\n    params.body = JSON.stringify(body);\n  } else {\n    params.body = body;\n  }\n  return Object.assign(Object.assign({}, params), parameters);\n};\n/**\r\n * Internal request handler that wraps fetch with error handling\r\n * @param fetcher - Fetch function to use\r\n * @param method - HTTP method\r\n * @param url - Request URL\r\n * @param options - Custom fetch options\r\n * @param parameters - Additional fetch parameters\r\n * @param body - Request body\r\n * @returns Promise with parsed response or error\r\n */\nfunction _handleRequest(fetcher, method, url, options, parameters, body) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => {\n      fetcher(url, _getRequestParams(method, options, parameters, body)).then(result => {\n        if (!result.ok) throw result;\n        if (options === null || options === void 0 ? void 0 : options.noResolveJson) return result;\n        // Handle empty responses (204, empty body)\n        const contentType = result.headers.get('content-type');\n        if (!contentType || !contentType.includes('application/json')) {\n          return {};\n        }\n        return result.json();\n      }).then(data => resolve(data)).catch(error => handleError(error, reject, options));\n    });\n  });\n}\n/**\r\n * Performs a GET request\r\n * @param fetcher - Fetch function to use\r\n * @param url - Request URL\r\n * @param options - Custom fetch options\r\n * @param parameters - Additional fetch parameters\r\n * @returns Promise with parsed response\r\n */\nexport function get(fetcher, url, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'GET', url, options, parameters);\n  });\n}\n/**\r\n * Performs a POST request\r\n * @param fetcher - Fetch function to use\r\n * @param url - Request URL\r\n * @param body - Request body to be JSON stringified\r\n * @param options - Custom fetch options\r\n * @param parameters - Additional fetch parameters\r\n * @returns Promise with parsed response\r\n */\nexport function post(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'POST', url, options, parameters, body);\n  });\n}\n/**\r\n * Performs a PUT request\r\n * @param fetcher - Fetch function to use\r\n * @param url - Request URL\r\n * @param body - Request body to be JSON stringified\r\n * @param options - Custom fetch options\r\n * @param parameters - Additional fetch parameters\r\n * @returns Promise with parsed response\r\n */\nexport function put(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'PUT', url, options, parameters, body);\n  });\n}\n/**\r\n * Performs a DELETE request\r\n * @param fetcher - Fetch function to use\r\n * @param url - Request URL\r\n * @param body - Request body to be JSON stringified\r\n * @param options - Custom fetch options\r\n * @param parameters - Additional fetch parameters\r\n * @returns Promise with parsed response\r\n */\nexport function remove(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'DELETE', url, options, parameters, body);\n  });\n}","map":{"version":3,"names":["StorageVectorsApiError","StorageVectorsUnknownError","isPlainObject","_getErrorMessage","err","msg","message","error_description","error","JSON","stringify","handleError","reject","options","__awaiter","isResponseLike","status","noResolveJson","responseError","json","then","statusCode","code","catch","statusText","_getRequestParams","method","parameters","body","params","headers","Object","assign","_handleRequest","fetcher","url","Promise","resolve","result","ok","contentType","get","includes","data","post","put","remove"],"sources":["C:\\Users\\thato\\OneDrive\\Desktop\\Hack\\PathFinder_Early_Talent_Intelligence\\Pathfinder\\node_modules\\@supabase\\storage-js\\src\\lib\\vectors\\fetch.ts"],"sourcesContent":["import { StorageVectorsApiError, StorageVectorsUnknownError } from './errors'\r\nimport { isPlainObject, resolveResponse } from './helpers'\r\nimport { VectorFetchParameters } from './types'\r\n\r\nexport type Fetch = typeof fetch\r\n\r\n/**\r\n * Options for fetch requests\r\n * @property headers - Custom HTTP headers\r\n * @property noResolveJson - If true, return raw Response instead of parsing JSON\r\n */\r\nexport interface FetchOptions {\r\n  headers?: {\r\n    [key: string]: string\r\n  }\r\n  noResolveJson?: boolean\r\n}\r\n\r\n/**\r\n * HTTP methods supported by the API\r\n */\r\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE'\r\n\r\n/**\r\n * Extracts error message from various error response formats\r\n * @param err - Error object from API\r\n * @returns Human-readable error message\r\n */\r\nconst _getErrorMessage = (err: any): string =>\r\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\r\n\r\n/**\r\n * Handles fetch errors and converts them to StorageVectors error types\r\n * @param error - The error caught from fetch\r\n * @param reject - Promise rejection function\r\n * @param options - Fetch options that may affect error handling\r\n */\r\nconst handleError = async (\r\n  error: unknown,\r\n  reject: (reason?: any) => void,\r\n  options?: FetchOptions\r\n) => {\r\n  // Check if error is a Response-like object (has status and ok properties)\r\n  // This is more reliable than instanceof which can fail across realms\r\n  const isResponseLike =\r\n    error &&\r\n    typeof error === 'object' &&\r\n    'status' in error &&\r\n    'ok' in error &&\r\n    typeof (error as any).status === 'number'\r\n\r\n  if (isResponseLike && !options?.noResolveJson) {\r\n    const status = (error as any).status || 500\r\n    const responseError = error as any\r\n\r\n    // Try to parse JSON body if available\r\n    if (typeof responseError.json === 'function') {\r\n      responseError\r\n        .json()\r\n        .then((err: any) => {\r\n          const statusCode = err?.statusCode || err?.code || status + ''\r\n          reject(new StorageVectorsApiError(_getErrorMessage(err), status, statusCode))\r\n        })\r\n        .catch(() => {\r\n          // If JSON parsing fails, create an ApiError with the HTTP status code\r\n          const statusCode = status + ''\r\n          const message = responseError.statusText || `HTTP ${status} error`\r\n          reject(new StorageVectorsApiError(message, status, statusCode))\r\n        })\r\n    } else {\r\n      // No json() method available, create error from status\r\n      const statusCode = status + ''\r\n      const message = responseError.statusText || `HTTP ${status} error`\r\n      reject(new StorageVectorsApiError(message, status, statusCode))\r\n    }\r\n  } else {\r\n    reject(new StorageVectorsUnknownError(_getErrorMessage(error), error))\r\n  }\r\n}\r\n\r\n/**\r\n * Builds request parameters for fetch calls\r\n * @param method - HTTP method\r\n * @param options - Custom fetch options\r\n * @param parameters - Additional fetch parameters like AbortSignal\r\n * @param body - Request body (will be JSON stringified if plain object)\r\n * @returns Complete fetch request parameters\r\n */\r\nconst _getRequestParams = (\r\n  method: RequestMethodType,\r\n  options?: FetchOptions,\r\n  parameters?: VectorFetchParameters,\r\n  body?: object\r\n) => {\r\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\r\n\r\n  if (method === 'GET' || !body) {\r\n    return params\r\n  }\r\n\r\n  if (isPlainObject(body)) {\r\n    params.headers = { 'Content-Type': 'application/json', ...options?.headers }\r\n    params.body = JSON.stringify(body)\r\n  } else {\r\n    params.body = body\r\n  }\r\n\r\n  return { ...params, ...parameters }\r\n}\r\n\r\n/**\r\n * Internal request handler that wraps fetch with error handling\r\n * @param fetcher - Fetch function to use\r\n * @param method - HTTP method\r\n * @param url - Request URL\r\n * @param options - Custom fetch options\r\n * @param parameters - Additional fetch parameters\r\n * @param body - Request body\r\n * @returns Promise with parsed response or error\r\n */\r\nasync function _handleRequest(\r\n  fetcher: Fetch,\r\n  method: RequestMethodType,\r\n  url: string,\r\n  options?: FetchOptions,\r\n  parameters?: VectorFetchParameters,\r\n  body?: object\r\n): Promise<any> {\r\n  return new Promise((resolve, reject) => {\r\n    fetcher(url, _getRequestParams(method, options, parameters, body))\r\n      .then((result) => {\r\n        if (!result.ok) throw result\r\n        if (options?.noResolveJson) return result\r\n        // Handle empty responses (204, empty body)\r\n        const contentType = result.headers.get('content-type')\r\n        if (!contentType || !contentType.includes('application/json')) {\r\n          return {}\r\n        }\r\n        return result.json()\r\n      })\r\n      .then((data) => resolve(data))\r\n      .catch((error) => handleError(error, reject, options))\r\n  })\r\n}\r\n\r\n/**\r\n * Performs a GET request\r\n * @param fetcher - Fetch function to use\r\n * @param url - Request URL\r\n * @param options - Custom fetch options\r\n * @param parameters - Additional fetch parameters\r\n * @returns Promise with parsed response\r\n */\r\nexport async function get(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  options?: FetchOptions,\r\n  parameters?: VectorFetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'GET', url, options, parameters)\r\n}\r\n\r\n/**\r\n * Performs a POST request\r\n * @param fetcher - Fetch function to use\r\n * @param url - Request URL\r\n * @param body - Request body to be JSON stringified\r\n * @param options - Custom fetch options\r\n * @param parameters - Additional fetch parameters\r\n * @returns Promise with parsed response\r\n */\r\nexport async function post(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  body: object,\r\n  options?: FetchOptions,\r\n  parameters?: VectorFetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'POST', url, options, parameters, body)\r\n}\r\n\r\n/**\r\n * Performs a PUT request\r\n * @param fetcher - Fetch function to use\r\n * @param url - Request URL\r\n * @param body - Request body to be JSON stringified\r\n * @param options - Custom fetch options\r\n * @param parameters - Additional fetch parameters\r\n * @returns Promise with parsed response\r\n */\r\nexport async function put(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  body: object,\r\n  options?: FetchOptions,\r\n  parameters?: VectorFetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'PUT', url, options, parameters, body)\r\n}\r\n\r\n/**\r\n * Performs a DELETE request\r\n * @param fetcher - Fetch function to use\r\n * @param url - Request URL\r\n * @param body - Request body to be JSON stringified\r\n * @param options - Custom fetch options\r\n * @param parameters - Additional fetch parameters\r\n * @returns Promise with parsed response\r\n */\r\nexport async function remove(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  body: object,\r\n  options?: FetchOptions,\r\n  parameters?: VectorFetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'DELETE', url, options, parameters, body)\r\n}\r\n"],"mappings":";AAAA,SAASA,sBAAsB,EAAEC,0BAA0B,QAAQ,UAAU;AAC7E,SAASC,aAAa,QAAyB,WAAW;AAsB1D;;;;;AAKA,MAAMC,gBAAgB,GAAIC,GAAQ,IAChCA,GAAG,CAACC,GAAG,IAAID,GAAG,CAACE,OAAO,IAAIF,GAAG,CAACG,iBAAiB,IAAIH,GAAG,CAACI,KAAK,IAAIC,IAAI,CAACC,SAAS,CAACN,GAAG,CAAC;AAErF;;;;;;AAMA,MAAMO,WAAW,GAAGA,CAClBH,KAAc,EACdI,MAA8B,EAC9BC,OAAsB,KACpBC,SAAA;EACF;EACA;EACA,MAAMC,cAAc,GAClBP,KAAK,IACL,OAAOA,KAAK,KAAK,QAAQ,IACzB,QAAQ,IAAIA,KAAK,IACjB,IAAI,IAAIA,KAAK,IACb,OAAQA,KAAa,CAACQ,MAAM,KAAK,QAAQ;EAE3C,IAAID,cAAc,IAAI,EAACF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEI,aAAa,GAAE;IAC7C,MAAMD,MAAM,GAAIR,KAAa,CAACQ,MAAM,IAAI,GAAG;IAC3C,MAAME,aAAa,GAAGV,KAAY;IAElC;IACA,IAAI,OAAOU,aAAa,CAACC,IAAI,KAAK,UAAU,EAAE;MAC5CD,aAAa,CACVC,IAAI,EAAE,CACNC,IAAI,CAAEhB,GAAQ,IAAI;QACjB,MAAMiB,UAAU,GAAG,CAAAjB,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEiB,UAAU,MAAIjB,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEkB,IAAI,KAAIN,MAAM,GAAG,EAAE;QAC9DJ,MAAM,CAAC,IAAIZ,sBAAsB,CAACG,gBAAgB,CAACC,GAAG,CAAC,EAAEY,MAAM,EAAEK,UAAU,CAAC,CAAC;MAC/E,CAAC,CAAC,CACDE,KAAK,CAAC,MAAK;QACV;QACA,MAAMF,UAAU,GAAGL,MAAM,GAAG,EAAE;QAC9B,MAAMV,OAAO,GAAGY,aAAa,CAACM,UAAU,IAAI,QAAQR,MAAM,QAAQ;QAClEJ,MAAM,CAAC,IAAIZ,sBAAsB,CAACM,OAAO,EAAEU,MAAM,EAAEK,UAAU,CAAC,CAAC;MACjE,CAAC,CAAC;IACN,CAAC,MAAM;MACL;MACA,MAAMA,UAAU,GAAGL,MAAM,GAAG,EAAE;MAC9B,MAAMV,OAAO,GAAGY,aAAa,CAACM,UAAU,IAAI,QAAQR,MAAM,QAAQ;MAClEJ,MAAM,CAAC,IAAIZ,sBAAsB,CAACM,OAAO,EAAEU,MAAM,EAAEK,UAAU,CAAC,CAAC;IACjE;EACF,CAAC,MAAM;IACLT,MAAM,CAAC,IAAIX,0BAA0B,CAACE,gBAAgB,CAACK,KAAK,CAAC,EAAEA,KAAK,CAAC,CAAC;EACxE;AACF,CAAC;AAED;;;;;;;;AAQA,MAAMiB,iBAAiB,GAAGA,CACxBC,MAAyB,EACzBb,OAAsB,EACtBc,UAAkC,EAClCC,IAAa,KACX;EACF,MAAMC,MAAM,GAAyB;IAAEH,MAAM;IAAEI,OAAO,EAAE,CAAAjB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEiB,OAAO,KAAI;EAAE,CAAE;EAEhF,IAAIJ,MAAM,KAAK,KAAK,IAAI,CAACE,IAAI,EAAE;IAC7B,OAAOC,MAAM;EACf;EAEA,IAAI3B,aAAa,CAAC0B,IAAI,CAAC,EAAE;IACvBC,MAAM,CAACC,OAAO,GAAAC,MAAA,CAAAC,MAAA;MAAK,cAAc,EAAE;IAAkB,GAAKnB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEiB,OAAO,CAAE;IAC5ED,MAAM,CAACD,IAAI,GAAGnB,IAAI,CAACC,SAAS,CAACkB,IAAI,CAAC;EACpC,CAAC,MAAM;IACLC,MAAM,CAACD,IAAI,GAAGA,IAAI;EACpB;EAEA,OAAAG,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAYH,MAAM,GAAKF,UAAU;AACnC,CAAC;AAED;;;;;;;;;;AAUA,SAAeM,cAAcA,CAC3BC,OAAc,EACdR,MAAyB,EACzBS,GAAW,EACXtB,OAAsB,EACtBc,UAAkC,EAClCC,IAAa;;IAEb,OAAO,IAAIQ,OAAO,CAAC,CAACC,OAAO,EAAEzB,MAAM,KAAI;MACrCsB,OAAO,CAACC,GAAG,EAAEV,iBAAiB,CAACC,MAAM,EAAEb,OAAO,EAAEc,UAAU,EAAEC,IAAI,CAAC,CAAC,CAC/DR,IAAI,CAAEkB,MAAM,IAAI;QACf,IAAI,CAACA,MAAM,CAACC,EAAE,EAAE,MAAMD,MAAM;QAC5B,IAAIzB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEI,aAAa,EAAE,OAAOqB,MAAM;QACzC;QACA,MAAME,WAAW,GAAGF,MAAM,CAACR,OAAO,CAACW,GAAG,CAAC,cAAc,CAAC;QACtD,IAAI,CAACD,WAAW,IAAI,CAACA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UAC7D,OAAO,EAAE;QACX;QACA,OAAOJ,MAAM,CAACnB,IAAI,EAAE;MACtB,CAAC,CAAC,CACDC,IAAI,CAAEuB,IAAI,IAAKN,OAAO,CAACM,IAAI,CAAC,CAAC,CAC7BpB,KAAK,CAAEf,KAAK,IAAKG,WAAW,CAACH,KAAK,EAAEI,MAAM,EAAEC,OAAO,CAAC,CAAC;IAC1D,CAAC,CAAC;EACJ,CAAC;;AAED;;;;;;;;AAQA,OAAM,SAAgB4B,GAAGA,CACvBP,OAAc,EACdC,GAAW,EACXtB,OAAsB,EACtBc,UAAkC;;IAElC,OAAOM,cAAc,CAACC,OAAO,EAAE,KAAK,EAAEC,GAAG,EAAEtB,OAAO,EAAEc,UAAU,CAAC;EACjE,CAAC;;AAED;;;;;;;;;AASA,OAAM,SAAgBiB,IAAIA,CACxBV,OAAc,EACdC,GAAW,EACXP,IAAY,EACZf,OAAsB,EACtBc,UAAkC;;IAElC,OAAOM,cAAc,CAACC,OAAO,EAAE,MAAM,EAAEC,GAAG,EAAEtB,OAAO,EAAEc,UAAU,EAAEC,IAAI,CAAC;EACxE,CAAC;;AAED;;;;;;;;;AASA,OAAM,SAAgBiB,GAAGA,CACvBX,OAAc,EACdC,GAAW,EACXP,IAAY,EACZf,OAAsB,EACtBc,UAAkC;;IAElC,OAAOM,cAAc,CAACC,OAAO,EAAE,KAAK,EAAEC,GAAG,EAAEtB,OAAO,EAAEc,UAAU,EAAEC,IAAI,CAAC;EACvE,CAAC;;AAED;;;;;;;;;AASA,OAAM,SAAgBkB,MAAMA,CAC1BZ,OAAc,EACdC,GAAW,EACXP,IAAY,EACZf,OAAsB,EACtBc,UAAkC;;IAElC,OAAOM,cAAc,CAACC,OAAO,EAAE,QAAQ,EAAEC,GAAG,EAAEtB,OAAO,EAAEc,UAAU,EAAEC,IAAI,CAAC;EAC1E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}